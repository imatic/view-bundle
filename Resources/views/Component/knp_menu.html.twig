{% extends 'knp_menu.html.twig' %}

{% macro appendClassAttribute(item, type, add) %}
    {% set getter = 'get' ~ type|capitalize %}
    {% set setter = 'set' ~ type|capitalize %}
    {% set value = attribute(item, getter, ['class'])|join(' ') %}
    {% set value = value ~ ' ' ~ add %}

    {% do attribute(item, setter, ['class', value|trim]) %}
{% endmacro %}

{% block root %}
    {% do item.setChildrenAttribute('class', options.menu_class) %}
    {{ parent() }}
{% endblock %}

{% block item %}
    {% if item.displayed %}
        {# building the class of the item #}
        {% set classes = item.attribute('class') is not empty ? ['nav-item', item.attribute('class')] : ['nav-item'] %}

        {% if matcher.isCurrent(item) %}
            {% set classes = classes|merge([options.currentClass]) %}
        {% elseif matcher.isAncestor(item, options.matchingDepth) %}
            {% set classes = classes|merge([options.ancestorClass]) %}
        {% endif %}

        {% if item.actsLikeFirst %}
            {% set classes = classes|merge([options.firstClass]) %}
        {% endif %}

        {% if item.actsLikeLast %}
            {% set classes = classes|merge([options.lastClass]) %}
        {% endif %}

        {# Mark item as "leaf" (no children) or as "branch" (has children that are displayed) #}
        {% if item.hasChildren and options.depth is not same as(0) %}
            {% if options.branch_class is not empty and item.displayChildren %}
                {% set classes = classes|merge([options.branch_class]) %}
            {% endif %}
        {% elseif options.leaf_class is not empty %}
            {% set classes = classes|merge([options.leaf_class]) %}
        {% endif %}

        {% set attributes = item.attributes %}
        {% if classes is not empty %}
            {% set attributes = attributes|merge({'class': classes|join(' ')}) %}
        {% endif %}

        {# displaying the item #}
        {% if item.uri is not empty and (not matcher.isCurrent(item) or options.currentAsLink) %}
            <li{{ _self.attributes(attributes) }}>
                {% do _self.appendClassAttribute(item, 'linkAttribute', 'nav-link') %}
                {{ block('link_element') }}

                {% if item.hasChildren and options.depth is not same as(0) and item.displayChildren %}
                    {{ block('dropdown_menu') }}
                {% endif %}
            </li>
        {% else %}
            {{ block('span_element') }}
        {% endif %}
    {% endif %}
{% endblock %}

{% block dropdown_menu %}
    <div class="dropdown-menu{% if item.extras.alignment|default('') %} {{ "dropdown-menu-#{item.extras.alignment}" }}{% endif %}">
        {% for item in item.children %}
            {% do _self.appendClassAttribute(item, 'linkAttribute', 'dropdown-item') %}

            {% if item.uri is not empty %}
                {{ block('link_element') }}
            {% else %}
                {{ block('span_element') }}
            {% endif %}

            {% if item.attributes.divider|default(false) %}
                <div class="dropdown-divider"></div>
            {% endif %}
        {% endfor %}
    </div>
{% endblock %}

{% block link_element %}
    {% if matcher.isCurrent(item) %}
        {% do _self.appendClassAttribute(item, 'linkAttribute', 'active') %}
    {% endif %}

    <a href="{{ item.uri }}"{{ _self.attributes(item.linkAttributes) }}>{{ block('label') }}</a>
{% endblock %}

{% block span_element %}
    {% do _self.appendClassAttribute(item, 'labelAttribute', 'navbar-text') %}

    <span{{ _self.attributes(item.labelAttributes) }}>{{ block('label') }}</span>
{% endblock %}
