{% macro action(action, context) %}
    {{ imatic_view_action_create(imatic_view_action(action), context)|raw }}
{% endmacro %}

{% macro button(action, context) %}{% apply spaceless %}
    {%- import _self as this -%}
    {% set action = imatic_view_action(action) %}
    {% set condition = imatic_view_condition_evaluate(action.condition|default(''), context|default({})) %}
    {% set nested = action.nested is not empty %}

    {% if condition and nested %}
        {% set element = imatic_view_action_create(action, context) %}
        {{ this._nested(element, action, context) }}
    {% elseif condition %}
        {% set element = imatic_view_action_create(action, context) %}
        {{ this._button(element, action) }}
    {% elseif nested %}
        {% set element = imatic_view_action_create({label: ''}, context) %}
        {{ this._nested(element, action, context) }}
    {% endif %}
{% endapply %}{% endmacro %}

{% macro _button(element, action) %}{% apply spaceless %}
    {% do element.classes.add('btn btn-' ~ action.type | default('default')) %}
    {{ element|raw }}
{% endapply %}{% endmacro %}

{% macro _nested(element, action, context) %}
    {%- import _self as this -%}
    {% set nested -%}
        {% for nested in action.nested -%}
            {% if imatic_view_condition_evaluate(nested.condition|default(''), context|default({})) %}
                <li>{{ this.action(nested, context) }}</li>
            {% endif %}
        {%- endfor %}
    {%- endset %}
    {% set hasNested = nested is not empty %}

    {% if hasNested %}
        <div class="btn-group">
    {% endif %}

    {% if action.url is not empty or action.route is not empty %}
        {% if element.value is not empty %}
            {{ this._button(element, action) }}
        {% endif %}
        {% if hasNested %}
            <button type="button"
                    class="btn btn-{{ action.type | default('default') }} dropdown-toggle"
                    data-toggle="dropdown">
                <span class="caret"></span>
                <span class="sr-only">Toggle Dropdown</span>
            </button>
        {% endif %}
    {% elseif hasNested %}
        {% do element.setValue(action.label ~ ' <span class="caret"></span>') %}
        {% do element.data.set('toggle', 'dropdown') %}
        {% do element.classes.add('dropdown-toggle') %}
        {{ this._button(element, action) }}
    {% endif %}

    {% if hasNested %}
        <ul class="dropdown-menu" role="menu">
            {{ nested }}
        </ul>
        </div>
    {% endif %}
{% endmacro %}

{% macro group(buttons, context) %}{% apply spaceless %}
    {%- import _self as this -%}
    <div class="btn-group">
        {% for button in buttons %}
            {{ this.button(button, context) }}
        {% endfor %}
    </div>
{% endapply %}{% endmacro %}

{% macro toolbar(buttonGroups, context) %}{% apply spaceless %}
    {%- import _self as this -%}
    <div class="btn-toolbar" role="toolbar">
        {% for buttons in buttonGroups %}
            {{ this.group(buttons, context) }}
        {% endfor %}
    </div>
{% endapply %}{% endmacro %}

{# todo:
- role(s)
- method (asi pres data => neresit)
- size (lg, sm, ..)

- block (true|false)
- disabled (true|false)
- tag (a|button|input)
- separators
- headers?
#}
